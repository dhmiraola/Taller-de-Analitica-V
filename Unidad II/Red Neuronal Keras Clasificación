from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.optimizers import Adam

# Dividimos los datos en variables de entrada X y de salida Y
X = data.drop('Outcome', axis=1)  # Variables independientes
y = data['Outcome']  # Variable dependiente

# Separamos los datos en conjuntos de prueba y test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Normalizar las características
scaler = StandardScaler()
X_train_normalized = scaler.fit_transform(X_train)
X_test_normalized = scaler.transform(X_test)

# Construir el modelo de red neuronal
model = Sequential([
    Dense(128, activation='relu', input_shape=(X_train_normalized.shape[1],)),
    Dense(64, activation='relu'),
    Dense(32, activation='relu'),
    Dense(1, activation='sigmoid')  # Una neurona de salida para clasificación binaria
])

# Compilar el modelo
model.compile(optimizer=Adam(), loss='binary_crossentropy', metrics=['accuracy'])

# Entrenar el modelo
model.fit(X_train_normalized, y_train, epochs=20, batch_size=32, verbose=1)

# Evaluar el modelo
loss, accuracy = model.evaluate(X_test_normalized, y_test, verbose=0)
print(f"Accuracy: {accuracy * 100:.2f}%")
